binded <- T
}
data <- rbind(data, newData[complete.cases(newData),])
}
}
data
directory <- "specdata"
threshold <- 150
i <- 0
##wdInit <- getwd()
directory <- paste(getwd(), "/" , directory, sep="")
binded <- F
##setwd(directory)
files <- list.files(path=directory)
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
if(nrow(newData[complete.cases(newData),]) > threshold) {
if(!binded) {
data <- newData[complete.cases(newData),]
binded <- T
}
data <- rbind(data, newData[complete.cases(newData),])
}
}
head(data)
nrow(data)
val1 <- data[["sulfate"]]
val2 <- data[["nitrate"]]
cor(val1, val2)
val1
class(val1)
length(val1)
length(val2)
nrow(data)
head(data)
data[ID]
data["ID"]
data["ID",1]
data["ID", 2]
data[1, "ID"]
data[2, "ID"]
data <- vector('numeric')
class data
class(data)
length(data)
c(1:5, 6:10)
directory <- "specdata"
threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
if(nrow(newData[complete.cases(newData),]) > threshold) {
##if(!binded) {
##    data <- newData[complete.cases(newData),]
##  binded <- T
##}
##data <- rbind(data, newData[complete.cases(newData),])
data <- c(data, cor(newData[["sulfate"]], newData[["nitrate"]]))
}
}
data
newData
directory <- "specdata"
threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
completes <- newData[complete.cases(newData),]
if(nrow(completes) > threshold) {
data <- c(data, cor(completes[["sulfate"]], completes[["nitrate"]]))
}
}
data
head(data)
directory <- "specdata"
threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
completes <- newData[complete.cases(newData),]
if(nrow(completes) > threshold) {
##as.numeric(format(round(unname(colMeans(data, na.rm = T)), 3), nsmall = 3))
data <- c(data, round(cor(completes[["sulfate"]], completes[["nitrate"]])), 5
}
}
data
directory <- "specdata"
threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
completes <- newData[complete.cases(newData),]
if(nrow(completes) > threshold) {
##as.numeric(format(round(unname(colMeans(data, na.rm = T)), 3), nsmall = 3))
data <- c(data, round(cor(completes[["sulfate"]], completes[["nitrate"]]), 5)
}
}
data
?round
directory <- "specdata"
threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
completes <- newData[complete.cases(newData),]
if(nrow(completes) > threshold) {
##as.numeric(format(round(unname(colMeans(data, na.rm = T)), 3), nsmall = 3))
data <- c(data, round(cor(completes[["sulfate"]], completes[["nitrate"]]), 5))
}
}
data
corr <- function(directory, threshold = 0) {
##directory <- "specdata"
##threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
completes <- newData[complete.cases(newData),]
if(nrow(completes) > threshold) {
##as.numeric(format(round(unname(colMeans(data, na.rm = T)), 3), nsmall = 3))
data <- c(data, round(cor(completes[["sulfate"]], completes[["nitrate"]]), 5))
}
}
data
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
source(corr.R)
source(complete.R)
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
##directory <- "specdata"
##threshold <- 150
directory <- paste(getwd(), "/" , directory, sep="")
files <- list.files(path=directory)
data <- vector('numeric')
for(i in seq_along(files)) {
fileId <- if(i < 10) {
paste("/00", i, ".csv", sep="")
} else if(i >= 10 & i < 100) {
paste("/0", i, ".csv", sep="")
} else {
paste("/", i, ".csv", sep="")
}
location <- paste(directory, fileId, sep="")
newData <- read.csv(location)
completes <- newData[complete.cases(newData),]
if(nrow(completes) > threshold) {
##as.numeric(format(round(unname(colMeans(data, na.rm = T)), 3), nsmall = 3))
data <- c(data, round(cor(completes[["sulfate"]], completes[["nitrate"]]), 5))
}
}
data
}
cr <- corr("specdata", 150)
head(cr)
submit()
log(-1)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris, iris$Species, mean)
iris$Species
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), function(x) colMeans(x[, c("Sepal.Length")]))
lapply(split(iris, iris$Species), function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
class(rowMeans(iris[, 1:4])
)
class(apply(iris[, 1:4], 2, mean))
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
mtcars
with(mtcars, tapply(hp, cyl, mean))
abs(82.63636 - 209.21429)
debug(ls)
ls
ls
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone data=airquality, facets = . ~ Month)
qplot(Wind, Ozone, data=airquality, facets = . ~ Month)
install.packages("ggplot2")
lib(ggplot2)
library(ggplot2)
install.packages("ggplot2")
qplot(Wind, Ozone, data=airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
var(c(1,-1,1,-1,-1,-1))
var(c(1,-1,1,-1,-1,1))
var(c(-2/3,2/3))
var(0)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
plot temp
plot(temp)
plot(temp$Prob)
plot(temp)
mean(x)
mean(p)
sum(1*.1,2*.2,3*.3,4*.4)
(.75*.3)/((.75*.3)+(.48*.7))
round(pnorm(70, mean=80, sd = 10) * 100)
qnorm(.95, mean=1100, sd=75)
75/sqrt(100)
qnorm(.95, mean=1100, sd=7.5)
pbinom(3, size=5, prob=.5. lower.tail=FALSE)
pbinom(3, size=5, prob=.5, lower.tail=FALSE)
mu <- 15
sd <- 10
10/sqrt(100)
mu <- .5
var <- 1/12
var
var*var
(var*var)/sqrt(1000)
sd <- (var*var)/sqrt(1000)
(var*var)/sqrt(100)
mu <- 5
ppois(10, lambda = mu * 3)
factorial(9)
9*8*7*6*5*4*3*2*1
factorial(9)/factorial(8)
factorial(9)/factorial(6)
9*8*7
factorial(9)/(factorial(6)*factorial(3))
1/12
var
var*var
sqrt(var)
sd <- sqrt(var)
sd/sqrt(100)
setwd("C:\\Users\\rripperda\\Documents\\GitHub\\RepData_PeerAssessment1")
data <- read.csv("activity\\activity.csv")
library(ggplot2)
dfNoNA = data[complete.cases(data),]
dailyTotals = aggregate(dfNoNA$steps, list(dfNoNA$date), sum)
dailyTotals$Group.1 = as.Date(dailyTotals$Group.1, format = "%Y-%m-%d")
intervalAvgs = aggregate(dfNoNA$steps, list(dfNoNA$interval), mean)
getIntervalMean <- function(x) {
intervalAvgs[intervalAvgs$Group.1==x,2]
}
naIndex <-data[is.na(data),]
for(i in 1:nrow(naIndex)) {
data[(data$date==naIndex$date[i] & data$interval==naIndex$interval[i]),]$steps <- getIntervalMean(naIndex$interval[i])
}
dailyTotalsImputed = aggregate(data$steps, list(data$date), sum)
dailyTotalsImputed$Group.1 = as.Date(dailyTotalsImputed$Group.1, format = "%Y-%m-%d")
data[is.na(data),]
data$date[1]
weekdays(data$date[1])
weekdays(as.Date(data$date[1])
)
weekdays(as.Date(data$date[1]))
daysOfWeek <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
class(weekdays(as.Date(data$date[1])))
daysOfWeek
class(daysOfWeek)
daysOfWeek["Monday"]
daysOfWeek[x=="Monday"]
weekdays(as.Date(data$date[1])) %in% daysOfWeek
ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, "weekday", "weekend")
head(ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, "weekday", "weekend"))
tail(ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, "weekday", "weekend"))
str(ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, "weekday", "weekend"))
ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, "weekday", "weekend")
str(data)
data$weekday <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, "weekday", "weekend")
str(data)
as.factor("weekday")
data <- c(data$steps, data$date, data$interval)
str(data)
data <- read.csv("activity\\activity.csv")
for(i in 1:nrow(naIndex)) {
data[(data$date==naIndex$date[i] & data$interval==naIndex$interval[i]),]$steps <- getIntervalMean(naIndex$interval[i])
}
data$weekday <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, as.factor("weekday"), as.factor("weekend")
)
str(data)
ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, as.factor("weekday"), as.factor("weekend"))
as.factor("weekday")
factor(letters[1:20], labels = "letter")
factor(letters[1:20])
factor("weekday", "weekend")
factor(c("weekday", "weekend")
)
factor(c("weekday", "weekend"))
factor(c("weekday", "weekend"))[1]
factor(c("weekday", "weekend"))[2]
data <- read.csv("activity\\activity.csv")
for(i in 1:nrow(naIndex)) {
data[(data$date==naIndex$date[i] & data$interval==naIndex$interval[i]),]$steps <- getIntervalMean(naIndex$interval[i])
}
str(data)
data$weekday <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, factor(c("weekday", "weekend"))[1], factor(c("weekday", "weekend"))[2]))
data$weekday <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, factor(c("weekday", "weekend"))[1], factor(c("weekday", "weekend"))[2])
str(data)
ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, factor(c("weekday", "weekend"))[1], factor(c("weekday", "weekend"))[2])
factor(c("weekday", "weekend"))[1]
wd <- factor(c("weekday", "weekend"))
wd[1]
wd[2]
data$weekday <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, wd[1], wd[2])
str(data)
head(ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, wd[1], wd[2]))
ifelse(weekdays(as.Date(data$date)[1]) %in% daysOfWeek, wd[1], wd[2])
ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, wd[1], wd[2])
ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, as.factor(wd[1]), wd[2])
ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, as.factor(wd[1]), as.factor(wd[2])
)
class(ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, as.factor(wd[1]), as.factor(wd[2])))
class(as.factor(ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, as.factor(wd[1]), as.factor(wd[2]))))
as.factor(ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, as.factor(wd[1]), as.factor(wd[2])))
weekdays(as.Date(data$date[1])) %in% daysOfWeek
head(weekdays(as.Date(data$date)) %in% daysOfWeek)
str(weekdays(as.Date(data$date)) %in% daysOfWeek)
wd[1]
str(data)
df <- c(data$steps, data$date, data$interval)
str(df)
df <- data[1,1:3]
df
df$weekday <- ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, wd[1], wd[2])
df
df$weekday
str(df)
ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, wd[1], wd[2])
weekdays(as.Date(data$date[1]))
weekdays(as.Date(data$date[1])) %in% daysOfWeek
wd[1]
nrow(data)
getWeekdayOrWeekend <- function(x) {
if(weekdays(as.Date(x)) %in% daysOfWeek) {
wd[1]
} else {
wd[2]
}
}
getWeekdayOrWeekend(data$date[1])
getWeekdayOrWeekend(data$date[2])
for(i in 1:nrow(data)) {
data$weekday[i] <- getWeekdayOrWeekend(data$date[i])
}
str(data)
data <- read.csv("activity\\activity.csv")
for(i in 1:nrow(naIndex)) {
data[(data$date==naIndex$date[i] & data$interval==naIndex$interval[i]),]$steps <- getIntervalMean(naIndex$interval[i])
}
for(i in 1:nrow(data)) {
data$weekday[i] <- getWeekdayOrWeekend(data$date[i])
}
str(dtat)
str(data)
getWeekdayOrWeekend(data$date[1:3])
getWeekdayOrWeekend(data$date[1])
class(getWeekdayOrWeekend(data$date[1]))
str(getWeekdayOrWeekend(data$date[1]))
ifelse(weekdays(as.Date(data$date[1])) %in% daysOfWeek, wd[1], wd[2])
ifelse(as.factor(weekdays(as.Date(data$date[1])) %in% daysOfWeek), wd[1], wd[2])
data$weekdayKey <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, wd[1], wd[2])
str(data)
data[data$weekdayKey==1]$weekday2 <- wd[1]
data[data$weekdayKey==1,]$weekday2 <- wd[1]
data[data$weekdayKey==1,]
data$weekday2 <- wd[1]
str(data)
data$weekday2 <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, wd[1], wd[2])
str(data)
data$weekday2 <- wd[1]
str(data)
data$weekday <- wd[1]
str(data)
head(data[data$weekdayKey==2,])
weekdays("2012-10-06 ")
weekdays("2012-10-06")
weekdays(as.Date("2012-10-06"))
data[data$weekdayKey==2,]$weekday <- wd[2]
head(data[data$weekdayKey==2,])
data$weekdayKey <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, wd[1], wd[2])
str(data)
data <- read.csv("activity\\activity.csv")
for(i in 1:nrow(naIndex)) {
data[(data$date==naIndex$date[i] & data$interval==naIndex$interval[i]),]$steps <- getIntervalMean(naIndex$interval[i])
}
data$weekday <- wd[1]
data$weekdayKey <- ifelse(weekdays(as.Date(data$date)) %in% daysOfWeek, wd[1], wd[2])
data[data$weekdayKey==2,]$weekday <- wd[2]
str(data)
head(data[data$weekdayKey==2,])
head(data[data$weekdayKey==1,])
library(lattice)
str(intervalAvgs)
head(aggregate(data$steps, list(data$interval, data$weekday), mean))
tail(aggregate(data$steps, list(data$interval, data$weekday), mean))
aggregate(data$steps, list(data$interval, data$weekday), mean)
intervalAvgsWd = aggregate(data$steps, list(data$interval, data$weekday), mean)
xyplot(intervalAvgsWd$x ~ intervalAvgsWd$Group.1 | intervalAvgsWd$Group.2, layout=c(1,2))
xyplot(intervalAvgsWd$x ~ intervalAvgsWd$Group.1 | intervalAvgsWd$Group.2, layout=c(1,2), type="l")
